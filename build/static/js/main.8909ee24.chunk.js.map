{"version":3,"sources":["CapChart.js","BreakdownChart.js","EmployeeList.js","AllocationList.js","ProjectsList.js","serviceWorker.js","index.js"],"names":["CapChart","chartStyle","marginLeft","marginRight","style","this","className","width","height","props","chartType","loader","data","options","gantt","trackHeight","criticalPathEnabled","rootProps","React","BreakdownChart","textAlign","title","chartSettings","Date","startDate","baEndDate","totalPoints","baPoints","qaEndDate","qaPoints","devEndDate","devPoints","Component","EmployeeList","backgroundColor","employees","map","employee","role","allocations","filter","allocation","employeeId","id","projectId","length","name","refreshState","Allocation","state","isEditing","deleteAllocation","bind","toggleEdit","setState","window","confirm","fetch","method","headers","result","console","log","endDate","allocation1","weight","workWeight","substring","onClick","src","alt","AllocationForm","changeHandler","event","target","value","postAllocation","putAllocation","fillState","preventDefault","body","JSON","stringify","emResult","then","json","alert","event1","slice","event2","onSubmit","type","list","autoComplete","onChange","required","min","max","step","EmployeeDropdown","ProjectForm","isShowing","formStyle","postProject","putProject","e","Project","deleteProject","toggleShowing","project","allocationState","addAllocation","Boolean","location","hostname","match","Legend","rules","border","borderRadius","borderWidth","borderColor","App","res","projectData","chartData","push","calcEndDate","projects","empty","label","deafultIndex","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8909ee24.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { Chart } from \"react-google-charts\";\n \nclass CapChart extends React.Component {\n  chartStyle = {\n    marginLeft : 50,\n    marginRight : 50,\n  }\n  render() {\n    return (\n      <div style = {this.chartStyle}\n      className={\"my-pretty-chart-container\"}>\n        <Chart\n  width={'100%'}\n  height={this.props.height +'px'}\n  chartType=\"Gantt\"\n  loader={<div>Loading Chart</div>}\n  data={this.props.data}\n  options={{\n    height: this.props.height,\n    gantt: {\n      trackHeight: 30,\n      criticalPathEnabled: false,\n      \n    },\n  }}\n  rootProps={{ 'data-testid': '2' }}\n/>\n      </div>\n    );\n  }\n}\n\nexport default CapChart;\n\n","import React from 'react';\r\nimport CapChart from './CapChart';\r\nclass BreakdownChart extends React.Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n      super(props)\r\n    }\r\n  \r\n    render() {   \r\n      return (   \r\n        <div>    \r\n            <h3 style={{textAlign: \"center\"}}>{this.props.title} Breakdown</h3> \r\n        <CapChart height = {this.props.height} data = {[this.props.chartSettings, \r\n          [1,\r\n          this.props.title + ' BA',\r\n          null,\r\n          new Date(this.props.startDate),\r\n          new Date(this.props.baEndDate),\r\n          null,\r\n          (this.props.totalPoints - this.props.baPoints)/this.props.totalPoints * 100,\r\n          null,], \r\n          [2,\r\n          this.props.title + ' QA',\r\n          'Insufficient Resources',\r\n          new Date(this.props.startDate),\r\n          new Date(this.props.qaEndDate),\r\n          null,\r\n          (this.props.totalPoints - this.props.qaPoints)/this.props.totalPoints * 100,\r\n          null,], \r\n          [3,\r\n          this.props.title + ' Dev',\r\n          'Insufficient Resources',\r\n          new Date(this.props.startDate),\r\n          new Date(this.props.devEndDate),\r\n          null,\r\n          (this.props.totalPoints - this.props.devPoints)/this.props.totalPoints * 100,\r\n          null,],]} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default BreakdownChart;","import * as React from \"react\";\r\nimport AllocationForm from \"./AllocationList\";\r\n\r\n\r\nclass EmployeeList extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\t\t\t<div style = {{backgroundColor : '#eeddd3'}}>\r\n                  {this.props.employees.map(employee => \r\n                    ['BA', 'QA', 'Dev'].map(role => {\r\n                        if (\r\n                            this.props.allocations.filter(\r\n                            allocation => (allocation.role === role\r\n                            && allocation.employeeId === employee.id\r\n                            && allocation.projectId === this.props.projectId)).length > 0\r\n                        )\r\n                        return <div>\r\n                            {employee.name} {role}\r\n                            {this.props.allocations.filter(allocation =>\r\n                                allocation.role === role\r\n                                && allocation.employeeId === employee.id \r\n                                && allocation.projectId === this.props.projectId)\r\n                                .map(allocation => <Allocation refreshState = {this.props.refreshState} employees = {this.props.employees} {...allocation}/>                \r\n                                )}\r\n                        </div>   \r\n                    }              \r\n                    )\r\n                )}\r\n\t\t\t</div>\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Allocation extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isEditing: false\r\n        }\r\n        this.deleteAllocation = this.deleteAllocation.bind(this);\r\n        this.toggleEdit = this.toggleEdit.bind(this);\r\n    }\r\n\r\n    toggleEdit() {\r\n        this.setState ({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n\r\n    async deleteAllocation(id) {\r\n        if(window.confirm('Are you sure')) {     \r\n            try { \r\n                const result = await fetch('https://localhost:44391/api/allocations/' + this.props.id, {\r\n                    method: 'delete',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-type':'application/json',\r\n                    }\r\n                })\r\n    \r\n                console.log('Result ' + result)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n            this.props.refreshState();\r\n        }\r\n    }\r\n\r\n \trender() {\r\n      const allocation = this.props;\r\n\r\n      if (this.state.isEditing) {\r\n        return (\r\n            <div>\r\n                <AllocationForm \r\n                    refreshState = {this.props.refreshState}\r\n                    employees = {this.props.employees}\r\n                    isEditing = {this.state.isEditing} \r\n                    toggleEdit = {this.toggleEdit}\r\n                    id = {allocation.id}\r\n                    projectId = {allocation.projectId}\r\n                    employeeId = {allocation.employeeId}\r\n                    role = {allocation.role}\r\n                    startDate = {allocation.startDate}\r\n                    endDate = {allocation.endDate}\r\n                    allocation = {allocation.allocation1}\r\n                    weight = {allocation.workWeight}\r\n                />\r\n            </div>\r\n        )\r\n      }\r\n      else {\r\n        return (\r\n            <div style = {{backgroundColor : '#eeddd3'}}>\r\n                Months: {allocation.startDate.substring(5, 7)}/{allocation.startDate.substring(0, 4)} - {allocation.endDate.substring(5, 7)}/{allocation.endDate.substring(0, 4)} Allocation: {allocation.allocation1}%\r\n                Weight: {allocation.workWeight}\r\n                <button onClick = {this.toggleEdit}>Update</button>\r\n                <button onClick={this.deleteAllocation}><img src=\"https://icon-library.com/images/delete-icon-png-16x16/delete-icon-png-16x16-21.jpg\" alt=\"my image\" width=\"12\" height=\"12\"/></button>\r\n            </div>\r\n        );\r\n      }\r\n  \t\r\n  }\r\n}\r\nexport default EmployeeList;","import * as React from \"react\";\r\nimport EmployeeList from './EmployeeList'\r\n\r\nclass AllocationForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            employee : '',\r\n            role: 'BA',\r\n            startDate : '',\r\n            endDate : '',\r\n            allocation: 100,\r\n            weight : '1'\r\n        }\r\n        this.postAllocation = this.postAllocation.bind(this);\r\n        this.putAllocation = this.putAllocation.bind(this);\r\n        this.fillState = this.fillState.bind(this);\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n    \r\n    async postAllocation(event) {\r\n        event.preventDefault();\r\n        try { \r\n            if (this.props.employees.filter(employee => employee.name === this.state.employee).length === 0) {\r\n                try { \r\n                    const emResult = await fetch('https://localhost:44391/api/employees', {\r\n                        method: 'post',\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-type':'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name : this.state.employee,\r\n                            role : this.state.role\r\n                        })\r\n                    });\r\n        \r\n                    console.log('Result ' + emResult)\r\n                } catch (e) {\r\n                    console.log(e)\r\n                }\r\n                this.props.refreshState();\r\n            }\r\n            fetch('https://localhost:44391/api/allocations', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    projectId: this.props.projectId,\r\n                    employeeId: \r\n                    this.props.employees.filter(employee => employee.name === this.state.employee)[0].id,\r\n                    role: this.state.role,\r\n                    startDate: this.state.startDate,\r\n                    endDate: this.state.endDate,\r\n                    allocation1: this.state.allocation,\r\n                    workWeight: this.state.weight,\r\n                })\r\n            })\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                if (json.length > 0) {\r\n                    alert(json);\r\n                }  \r\n                this.props.refreshState();     \r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.props.refreshState();\r\n    }\r\n\r\n    async putAllocation(event) {\r\n        event.preventDefault();\r\n        try {\r\n            await fetch('https://localhost:44391/api/allocations/' + this.props.id, {\r\n                method: 'put',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id: this.props.id,\r\n                    projectId: this.props.projectId,\r\n                    employeeId:this.props.employees.filter(employee => employee.name === this.state.employee)[0].id,\r\n                    role: this.state.role,\r\n                    startDate: this.state.startDate,\r\n                    endDate: this.state.endDate,\r\n                    allocation1: this.state.allocation,\r\n                    workWeight: this.state.weight,\r\n                })\r\n            })\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                if (json.length > 0) {\r\n                    alert(json);\r\n                }  \r\n                else {\r\n                    this.props.toggleEdit();\r\n                }\r\n                this.props.refreshState();     \r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.props.refreshState();   \r\n    }\r\n\r\n    fillState() {\r\n        var event1 = new Date(this.props.startDate);\r\n        let startDate = JSON.stringify(event1)\r\n        startDate = startDate.slice(1,8)\r\n        var event2 = new Date(this.props.endDate);\r\n        let endDate = JSON.stringify(event2)\r\n        endDate = endDate.slice(1,8)\r\n        this.setState({\r\n            employee : \r\n            this.props.employees.filter(employee => employee.id === this.props.employeeId)[0].name,\r\n            role: this.props.role,\r\n            startDate : startDate,\r\n            endDate : endDate,\r\n            allocation: this.props.allocation,\r\n            weight : this.props.weight\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isEditing) {\r\n            this.fillState();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\t\t\t<div>\r\n            <form \r\n                onSubmit={this.props.isEditing ? this.putAllocation : this.postAllocation} \r\n                style={{backgroundColor: this.props.isEditing ? '#eeddd3' :'#d3eedd'}}\r\n            >\r\n\t\t\t<label >Employee: </label>\r\n            <input type=\"text\" list=\"employees\"\r\n            name = 'employee'\r\n            autoComplete = \"off\"\r\n            value = {this.state.employee}\r\n            onChange = {this.changeHandler}\r\n            required/>\r\n            <datalist id=\"employees\">\r\n                {this.props.employees.map(employee => <EmployeeDropdown {...employee}/>)}\r\n            </datalist>\r\n            <label > Role: </label>\r\n            <select type = \"text\" \r\n            name = 'role'\r\n            value = {this.state.role}\r\n            onChange = {this.changeHandler}\r\n            required>\r\n                <option>BA</option>\r\n                <option>QA</option>\r\n                <option>Dev</option>\r\n            </select>\r\n            <label > Start Month: </label>\r\n            <input type=\"month\" min=\"2020-07\" \r\n            name = 'startDate'\r\n            value = {this.state.startDate}\r\n            onChange = {this.changeHandler}\r\n            required\r\n            style={{width: \"145px\"}}/>\r\n            <label > End Month: </label>\r\n            <input type=\"month\" min=\"2020-07\"\r\n            name = 'endDate'\r\n            value = {this.state.endDate}\r\n            onChange = {this.changeHandler}\r\n            style={{width: \"145px\"}}/>\r\n            <label> Allocation: </label>\r\n            <input \r\n            type=\"number\" min=\"0\" max=\"100\" step=\"0.01\" \r\n            name = 'allocation'\r\n            value = {this.state.allocation}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            <label> Weight: </label>\r\n            <select type = \"text\" \r\n            name = 'weight'\r\n            value = {this.state.weight}\r\n            onChange = {this.changeHandler}>\r\n                <option>.25</option>\r\n                <option>.50</option>\r\n                <option>.75</option>\r\n                <option>1</option>\r\n            </select>        \r\n            {this.props.isEditing ? <span><button onClick = {this.props.toggleEdit}>Cancel</button><button type = 'submit'>Confirm</button></span> : <button type = 'submit'>Add Allocation</button>}\r\n\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nclass EmployeeDropdown extends React.Component {\r\n\trender() {\r\n  \tconst employee = this.props;\r\n  \treturn (\r\n        <option>{employee.name}</option>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllocationForm;","import * as React from \"react\";\r\nimport AllocationForm from \"./AllocationList\";\r\nimport EmployeeList from './EmployeeList'\r\n\r\nclass ProjectForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: '',\r\n            title : '',\r\n            startDate : '',\r\n            endDate : '',\r\n            totalPoints: '',\r\n            baPoints : '',\r\n            qaPoints : '',\r\n            devPoints : '',\r\n            isShowing: ''\r\n        }\r\n        this.formStyle = {\r\n            backgroundColor: '#d3e4ee',\r\n            marginLeft : 100,\r\n            marginRight : 100,\r\n        }\r\n        this.postProject = this.postProject.bind(this);\r\n        this.putProject = this.putProject.bind(this);\r\n        this.fillState = this.fillState.bind(this);\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n    \r\n    async postProject(event) {\r\n        event.preventDefault();\r\n        try {\r\n            fetch('https://localhost:44391/api/projects', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    title : this.state.title,\r\n                    startDate : this.state.startDate,\r\n                    endDate : this.state.endDate,\r\n                    totalPoints: this.state.totalPoints,\r\n                    baPoints : this.state.baPoints,\r\n                    qaPoints : this.state.qaPoints,\r\n                    devPoints : this.state.devPoints,\r\n                    isShowing: false\r\n                })\r\n            })\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                if (json.length > 0) {\r\n                    alert(json);\r\n                }  \r\n                this.props.refreshState();     \r\n            })\r\n            //console.log('Result ' + result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        \r\n    }\r\n\r\n    async putProject(event) {\r\n        event.preventDefault();\r\n        try {\r\n            await fetch('https://localhost:44391/api/Projects/' + this.props.projectId, {\r\n                method: 'put',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify(this.state)\r\n            })\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                if (json.length > 0) {\r\n                    alert(json);\r\n                }\r\n                else {\r\n                    this.props.toggleEdit();\r\n                }\r\n                this.props.refreshState();     \r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        \r\n\r\n        this.props.refreshState();\r\n    }\r\n\r\n    fillState() {\r\n        var startDate = JSON.stringify(new Date(this.props.startDate)).slice(1,11);\r\n        var endDate = null;\r\n        if (this.props.endDate != null) {\r\n            endDate = JSON.stringify(new Date(this.props.endDate)).slice(1,11);\r\n        }\r\n        this.setState({\r\n            id: this.props.projectId,\r\n            title : this.props.title,\r\n            startDate : startDate,\r\n            endDate : endDate,\r\n            totalPoints: this.props.totalPoints,\r\n            baPoints : this.props.baPoints,\r\n            qaPoints : this.props.qaPoints,\r\n            devPoints : this.props.devPoints,\r\n            isShowing: this.props.isShowing\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isEditing) {\r\n            this.fillState();\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\t        \r\n            {/* Form */}\r\n            <form \r\n                onSubmit={this.props.isEditing ? this.putProject : this.postProject} \r\n                //style={{backgroundColor: this.props.isEditing ? '#ddd3ee' :'#d3e4ee'}}\r\n                style = {this.formStyle}\r\n            >\r\n                            \r\n            <label>Project Title: </label>\r\n            <input \r\n            type=\"text\"\r\n            name = 'title'\r\n            value = {this.state.title}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            autoComplete=\"off\"\r\n            />\r\n            \r\n            {/* Dates */}\r\n            <label> Start Date: </label>\r\n            <input \r\n            type=\"date\"\r\n            name = 'startDate'\r\n            value = {this.state.startDate}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            <label> End Date: </label>\r\n            <input \r\n            type=\"date\"\r\n            name = 'endDate'\r\n            value = {this.state.endDate}\r\n            onChange = {this.changeHandler}\r\n            />\r\n\r\n            \r\n            {/* Points */}\r\n            <label>Total Points: </label>\r\n            <input \r\n            type=\"number\"\r\n            name = 'totalPoints'\r\n            value = {this.state.totalPoints}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            <br /><label>BA Points: </label>\r\n            <input \r\n            type=\"number\"\r\n            name = 'baPoints'\r\n            value = {this.state.baPoints}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            <label> QA Points: </label>\r\n            <input \r\n            type=\"number\"\r\n            name = 'qaPoints'\r\n            value = {this.state.qaPoints}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            <label > Developer Points: </label>\r\n            <input \r\n            type=\"number\"\r\n            name = 'devPoints'\r\n            value = {this.state.devPoints}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            \r\n            {this.props.isEditing ? <span><button onClick = {this.props.toggleEdit}>Cancel</button><button type = 'submit'>Confirm</button></span> : <button type = 'submit'>Add Project</button>}\r\n            </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Project extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isEditing: false\r\n        }\r\n        this.deleteProject = this.deleteProject.bind(this);\r\n        this.toggleEdit = this.toggleEdit.bind(this);\r\n        this.toggleShowing = this.toggleShowing.bind(this);\r\n    }\r\n\r\n    toggleEdit() {\r\n        this.setState ({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n\r\n    async deleteProject(id) {\r\n        if(window.confirm('Are you sure')) {\r\n            \r\n            try { \r\n                const result = await fetch('https://localhost:44391/api/projects/' + this.props.id, {\r\n                    method: 'delete',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-type':'application/json',\r\n                    }\r\n                })\r\n    \r\n                console.log('Result ' + result)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n            this.props.refreshState();\r\n        }\r\n    }\r\n\r\n    toggleShowing() {\r\n        try {\r\n            const result = fetch('https://localhost:44391/api/projects/' + this.props.id, {\r\n                method: 'put',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id: this.props.id,\r\n                    isShowing: !this.props.isShowing\r\n               })\r\n            });\r\n\r\n            console.log('Result ' + result)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.props.refreshState();\r\n    }\r\n\trender() {\r\n    const project = this.props;\r\n\r\n    if (this.state.isEditing) {\r\n        return (\r\n            <div>\r\n                <ProjectForm \r\n                    refreshState = {this.props.refreshState}\r\n                    isEditing = {this.state.isEditing} \r\n                    toggleEdit = {this.toggleEdit}\r\n                    projectId = {this.props.id}\r\n                    title = {this.props.title}\r\n                    startDate = {this.props.startDate}\r\n                    endDate = {this.props.endDate}\r\n                    totalPoints = {this.props.totalPoints}\r\n                    baPoints = {this.props.baPoints}\r\n                    qaPoints = {this.props.qaPoints}\r\n                    devPoints = {this.props.devPoints}\r\n                    isShowing = {this.props.isShowing}\r\n                />\r\n                <EmployeeList refreshState = {this.props.refreshState} projectId = {this.props.id} employees = {this.props.employees} allocations = {this.props.allocations} />               \r\n                <AllocationForm \r\n                    refreshState = {this.props.refreshState}\r\n                    projectId = {project.id} \r\n                    employees = {project.employees} \r\n                    allocations = {project.allocationState}\r\n                />\r\n            </div>\r\n        )\r\n    }  else {\r\n        return (\r\n            <div>\r\n                <div style = {{backgroundColor : '#ddd3ee'}}>Project: {project.title} Start Date: {project.startDate.substring(5,7)}/{project.startDate.substring(8,10)}/{project.startDate.substring(0,4)} {project.endDate === null ? <span/> : <span>End Date: {project.endDate.substring(5,7)}/{project.endDate.substring(8,10)}/{project.endDate.substring(0,4)} </span>} Total Points: {project.totalPoints} BA Points: {project.baPoints} QA Points: {project.qaPoints} Dev Points: {project.devPoints}\r\n                <button onClick = {this.toggleEdit}>Update</button>\r\n                <button onClick={this.deleteProject}><img src=\"https://icon-library.com/images/delete-icon-png-16x16/delete-icon-png-16x16-21.jpg\" alt=\"my image\" width=\"12\" height=\"12\"/></button>\r\n                </div>\r\n                <EmployeeList refreshState = {this.props.refreshState} projectId = {this.props.id} employees = {this.props.employees} allocations = {this.props.allocations} addAllocation = {this.props.addAllocation}/>\r\n                <AllocationForm\r\n                    refreshState = {this.props.refreshState} \r\n                    projectId = {project.id} \r\n                    employees = {project.employees} \r\n                    allocations = {project.allocationState} \r\n                    isEditing = {false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n  \t\r\n  }\r\n}\r\nexport { ProjectForm, Project, };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport CapChart from './CapChart';\nimport BreakdownChart from './BreakdownChart';\nimport ProjectsList, {ProjectForm, Project} from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\n\n//chart library format\n// const chartSettings = [\n//     [\n//       { type: 'string', label: 'Task ID' },\n//       { type: 'string', label: 'Task Name' },\n//       { type: 'string', label: 'Resource' },\n//       { type: 'date', label: 'Start Date' },\n//       { type: 'date', label: 'End Date' },\n//       { type: 'number', label: 'Duration' },\n//       { type: 'number', label: 'Percent Complete' },\n//       { type: 'string', label: 'Dependencies' },\n//     ], \n//     [\n//       'EEL',\n//       'EEL',\n//       null,\n//       new Date(2020, 5, 1),\n//       new Date(2020, 7, 14),\n//       null,\n//       100,\n//       null,\n//     ],\n//   ];\n\n// padding: 10px;\n//         border: 2px solid #1c87c9;\n//         border-radius: 5px;\n//         background-color: #e5e5e5;\n//         text-align: center;\n\nfunction Legend(props) {\n  const tableStyle = {\n    border: '2px solid black',\n    backgroundColor: '#d3e4ee',\n    marginLeft : 'auto',\n    marginRight : 'auto',\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#fff'\n  }\n  return <table rules ='all' \n  style = {tableStyle}>\n <tr>\n    <th width = '20'>Weight</th>\n    <th width = '30'>Description</th>\n    <th width = '50'> BA Hours per point</th>\n    <th width = '50'> QA Hours per point</th>\n    <th width = '50'> Dev Hours per point</th>\n  </tr>\n  <tr>\n    <td>.25</td>\n    <td>Lead, not much direct work</td>\n    <td>63</td>\n    <td>63</td>\n    <td>63</td>\n  </tr>\n  <tr>\n    <td>.50</td>\n    <td>New Employee</td>\n    <td>28</td>\n    <td>38</td>\n    <td>33</td>\n  </tr>\n  <tr>\n    <td>.75</td>\n    <td>Progressing towards full capacity or also mentoring junior members</td>\n    <td>13</td>\n    <td>19</td>\n    <td>17</td>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>Full capactiy</td>\n    <td>6</td>\n    <td>11</td>\n    <td>9</td>\n  </tr>\n  </table>;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: [\n        [\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n      ],\n      ], projects: [], allocations: [], employees: [], height: 0,\n    };\n  }\n  refreshState = () => {\n      fetch('https://localhost:44391/api/projects')\n      .then(res => res.json())\n      .then(json => {\n          const projectData = [this.state.chartData[0],];\n\n          json.map(project =>\n              projectData.push([\n                  project.id,\n                  project.title,\n                  (project.endDate && new Date(project.calcEndDate) > new Date(project.endDate)) ? 'Insufficient Resources' : null,\n                  new Date(project.startDate),\n                  new Date(project.calcEndDate),\n                  null,\n                  100 * (((project.totalPoints-project.baPoints)+(project.totalPoints-project.qaPoints)+(project.totalPoints-project.devPoints))/3)/project.totalPoints,\n                  null,\n              ])\n           )\n\n          \n          this.setState({\n            projects: json,\n            chartData: projectData,\n            height: (120 + (json.length * 30)),\n          });\n        }\n        \n      )\n      this.setState({\n        empty: this.state.projects.length === 1\n      });\n      fetch('https://localhost:44391/api/employees')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              employees: json\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/allocations')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              allocations: json,\n              });\n        },\n      )   \n      // this.setState({\n      //   isEmpty: this.state.projects.length === 0\n      // })\n  }\n\n\n  \n  componentDidMount() {\n    this.refreshState();\n  };\n\n\trender() {\n  \treturn (\n    \t<div>\n        <div><h1 style={{textAlign: \"center\"}}>{this.props.title}</h1></div>\n\n        {this.state.projects.length === 0 ? <div/> : <CapChart height = {this.state.height} data={this.state.chartData} refreshState = {this.refreshState}/>}\n\n        <ProjectForm \n          height = {this.state.height}\n          isEditing = {false}\n          allocations = {this.state.allocations} \n          employees = {this.state.employees} \n          projects = {this.state.projects} \n          refreshState={this.refreshState}\n        />\n\n        <Legend />\n        \n        <Tabs deafultIndex={0}>\n            <TabList>\n              <Tab>Employees</Tab>\n              {this.state.projects.map(project => <Tab>{project.title}</Tab>)}\n            </TabList>\n            <TabPanel>\n              {this.state.employees.map(employees => <div>{employees.name}<br/></div>)}\n            </TabPanel>\n            {this.state.projects.map(project => <TabPanel>\n              <div>\n              <Project\n              refreshState = {this.refreshState} \n              employees = {this.state.employees} \n              allocationState = {this.state.allocations}  \n              {...project}/>\n              <BreakdownChart height = {150} chartSettings = {[\n              { type: 'string', label: 'Task ID' },\n              { type: 'string', label: 'Task Name' },\n              { type: 'string', label: 'Resource' },\n              { type: 'date', label: 'Start Date' },\n              { type: 'date', label: 'End Date' },\n              { type: 'number', label: 'Duration' },\n              { type: 'number', label: 'Percent Complete' },\n              { type: 'string', label: 'Dependencies' },\n              ]} \n              {...project}/>\n              </div>\n            </TabPanel>)}\n          </Tabs  >\n\n        {/* {this.state.projects.map(project => <Project\n          refreshState = {this.refreshState} \n          employees = {this.state.employees} \n          allocationState = {this.state.allocations}  \n        {...project}/>)}\n        \n        <ProjectForm \n          isEditing = {false}\n          allocations = {this.state.allocations} \n          employees = {this.state.employees} \n          projects = {this.state.projects} \n          refreshState={this.refreshState}\n        />\n\n\n        <Legend />\n\n        {this.state.projects.map(project => <BreakdownChart chartSettings = {[\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n        ]} {...project}/>)} */}\n\n      </div>\n\n      \n    );\n  }\t\n}\n\nReactDOM.render(\n  <App title = 'Webteam Capacity Management'\n  />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}