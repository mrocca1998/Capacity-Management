{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrocc\\\\cap-man\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CapChart from './CapChart';\nimport BreakdownChart from './BreakdownChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker'; //chart library format\n// const chartSettings = [\n//     [\n//       { type: 'string', label: 'Task ID' },\n//       { type: 'string', label: 'Task Name' },\n//       { type: 'string', label: 'Resource' },\n//       { type: 'date', label: 'Start Date' },\n//       { type: 'date', label: 'End Date' },\n//       { type: 'number', label: 'Duration' },\n//       { type: 'number', label: 'Percent Complete' },\n//       { type: 'string', label: 'Dependencies' },\n//     ], \n//     [\n//       'EEL',\n//       'EEL',\n//       null,\n//       new Date(2020, 5, 1),\n//       new Date(2020, 7, 14),\n//       null,\n//       100,\n//       null,\n//     ],\n//   ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshState = () => {\n      fetch('https://localhost:44391/api/projects').then(res => res.json()).then(json => {\n        const projectData = [this.state.chartData[0]];\n        json.map(project => projectData.push([project.id, project.title, null, new Date(project.startDate), new Date(project.calcEndDate), null, null, null]));\n        this.setState({\n          projects: json,\n          chartData: projectData\n        });\n      });\n      this.setState({\n        empty: this.state.projects.length === 1\n      });\n      fetch('https://localhost:44391/api/employees').then(res => res.json()).then(json => {\n        this.setState({\n          employees: json\n        });\n      });\n      fetch('https://localhost:44391/api/allocations').then(res => res.json()).then(json => {\n        this.setState({\n          allocations: json\n        });\n      });\n    };\n\n    this.state = {\n      chartData: [[{\n        type: 'string',\n        label: 'Task ID'\n      }, {\n        type: 'string',\n        label: 'Task Name'\n      }, {\n        type: 'string',\n        label: 'Resource'\n      }, {\n        type: 'date',\n        label: 'Start Date'\n      }, {\n        type: 'date',\n        label: 'End Date'\n      }, {\n        type: 'number',\n        label: 'Duration'\n      }, {\n        type: 'number',\n        label: 'Percent Complete'\n      }, {\n        type: 'string',\n        label: 'Dependencies'\n      }]],\n      projects: [],\n      allocations: [],\n      employees: [],\n      empty: true\n    };\n  }\n\n  componentDidMount() {\n    this.refreshState();\n  }\n\n  async postProject(props) {\n    event.preventDefault();\n\n    try {\n      const result = await fetch('https://localhost:44391/api/projects', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      console.log('Result ' + result);\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.props.refreshState();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 14\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CapChart, {\n      data: this.state.chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(ProjectsList, {\n      allocations: this.state.allocations,\n      employees: this.state.employees,\n      projects: this.state.projects,\n      refreshState: this.refreshState,\n      addAllocation: this.addAllocation,\n      addEmployee: this.addEmployee,\n      postProject: this.postProject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), this.state.projects.map(project => /*#__PURE__*/React.createElement(BreakdownChart, Object.assign({\n      chartSettings: [{\n        type: 'string',\n        label: 'Task ID'\n      }, {\n        type: 'string',\n        label: 'Task Name'\n      }, {\n        type: 'string',\n        label: 'Resource'\n      }, {\n        type: 'date',\n        label: 'Start Date'\n      }, {\n        type: 'date',\n        label: 'End Date'\n      }, {\n        type: 'number',\n        label: 'Duration'\n      }, {\n        type: 'number',\n        label: 'Percent Complete'\n      }, {\n        type: 'string',\n        label: 'Dependencies'\n      }]\n    }, project, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 45\n      }\n    }))));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  title: \"Personal Lines Capacity Management\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/mrocc/cap-man/src/index.js"],"names":["React","ReactDOM","CapChart","BreakdownChart","ProjectsList","serviceWorker","App","Component","constructor","props","refreshState","fetch","then","res","json","projectData","state","chartData","map","project","push","id","title","Date","startDate","calcEndDate","setState","projects","empty","length","employees","allocations","type","label","componentDidMount","postProject","event","preventDefault","result","method","headers","body","JSON","stringify","console","log","e","render","textAlign","addAllocation","addEmployee","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport CapChart from './CapChart';\nimport BreakdownChart from './BreakdownChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\n\n//chart library format\n// const chartSettings = [\n//     [\n//       { type: 'string', label: 'Task ID' },\n//       { type: 'string', label: 'Task Name' },\n//       { type: 'string', label: 'Resource' },\n//       { type: 'date', label: 'Start Date' },\n//       { type: 'date', label: 'End Date' },\n//       { type: 'number', label: 'Duration' },\n//       { type: 'number', label: 'Percent Complete' },\n//       { type: 'string', label: 'Dependencies' },\n//     ], \n//     [\n//       'EEL',\n//       'EEL',\n//       null,\n//       new Date(2020, 5, 1),\n//       new Date(2020, 7, 14),\n//       null,\n//       100,\n//       null,\n//     ],\n//   ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: [\n        [\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n      ],\n      ], projects: [], allocations: [], employees: [], empty: true,\n    };\n  }\n  refreshState = () => {\n      fetch('https://localhost:44391/api/projects')\n      .then(res => res.json())\n      .then(json => {\n          const projectData = [this.state.chartData[0],];\n\n          json.map(project =>\n              projectData.push([\n                  project.id,\n                  project.title,\n                  null,\n                  new Date(project.startDate),\n                  new Date(project.calcEndDate),\n                  null,\n                  null,\n                  null,\n              ])\n           )\n\n          \n          this.setState({\n            projects: json,\n            chartData: projectData\n          });\n        }\n        \n      )\n      this.setState({\n        empty: this.state.projects.length === 1\n      });\n      fetch('https://localhost:44391/api/employees')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              employees: json\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/allocations')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              allocations: json,\n              });\n        },\n      )   \n  }\n  \n  componentDidMount() {\n    this.refreshState();\n  };\n\n  async postProject(props) {\n    event.preventDefault();\n    try {\n        const result = await fetch('https://localhost:44391/api/projects', {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json',\n                'Content-type':'application/json',\n            },\n            body: JSON.stringify(body)\n        });\n\n        console.log('Result ' + result)\n    } catch (e) {\n        console.log(e)\n    }\n    this.props.refreshState();\n  }\n\n\trender() {\n  \treturn (\n    \t<div>\n        <div><h1 style={{textAlign: \"center\"}}>{this.props.title}</h1></div>\n        {<CapChart data={this.state.chartData} />}\n        <ProjectsList allocations = {this.state.allocations} employees = {this.state.employees} projects = {this.state.projects} refreshState={this.refreshState} addAllocation={this.addAllocation} addEmployee={this.addEmployee}\n          postProject = {this.postProject}/>\n        {this.state.projects.map(project => <BreakdownChart chartSettings = {[\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n        ]} {...project}/>)}\n      </div>\n    );\n  }\t\n}\n\nReactDOM.render(\n  <App title = 'Personal Lines Capacity Management'/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}