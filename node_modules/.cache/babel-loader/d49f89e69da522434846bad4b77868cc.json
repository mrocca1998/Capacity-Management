{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrocc\\\\cap-man\\\\src\\\\AllocationList.js\";\nimport * as React from \"react\";\nimport EmployeeList from './EmployeeList';\n\nclass AllocationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeHandler = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = {\n      employee: '',\n      role: 'BA',\n      startDate: '',\n      endDate: '',\n      allocation: 100,\n      weight: '1'\n    };\n    this.postAllocation = this.postAllocation.bind(this);\n    this.putAllocation = this.putAllocation.bind(this);\n    this.fillState = this.fillState.bind(this);\n  }\n\n  async postAllocation(event) {\n    event.preventDefault();\n\n    try {\n      if (this.props.employees.filter(employee => employee.name === this.state.employee).length === 0) {\n        try {\n          const emResult = await fetch('https://localhost:44391/api/employees', {\n            method: 'post',\n            headers: {\n              'Accept': 'application/json',\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              name: this.state.employee,\n              role: this.state.role\n            })\n          });\n          console.log('Result ' + emResult);\n        } catch (e) {\n          console.log(e);\n        }\n\n        this.props.refreshState();\n      }\n\n      fetch('https://localhost:44391/api/allocations', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: this.props.projectId,\n          employeeId: this.props.employees.filter(employee => employee.name === this.state.employee)[0].id,\n          role: this.state.role,\n          startDate: this.state.startDate,\n          endDate: this.state.endDate,\n          allocation1: this.state.allocation,\n          workWeight: this.state.weight\n        })\n      }).then(result => result.json()).then(json => {\n        if (json.length > 0) {\n          alert(json);\n        }\n\n        this.props.refreshState();\n      });\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.props.refreshState();\n  }\n\n  async putAllocation(event) {\n    event.preventDefault();\n\n    try {\n      fetch('https://localhost:44391/api/allocations/' + this.props.id, {\n        method: 'put',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: this.props.id,\n          projectId: this.props.projectId,\n          employeeId: this.props.employees.filter(employee => employee.name === this.state.employee)[0].id,\n          role: this.state.role,\n          startDate: this.state.startDate,\n          endDate: this.state.endDate,\n          allocation1: this.state.allocation,\n          workWeight: this.state.weight\n        })\n      }).then(result => result.json()).then(json => {\n        if (json.length > 0) {\n          alert(json);\n        }\n\n        this.props.refreshState();\n      });\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.props.toggleEdit();\n  }\n\n  fillState() {\n    var event1 = new Date(this.props.startDate);\n    let startDate = JSON.stringify(event1);\n    startDate = startDate.slice(1, 8);\n    var event2 = new Date(this.props.endDate);\n    let endDate = JSON.stringify(event2);\n    endDate = endDate.slice(1, 8);\n    this.setState({\n      employee: this.props.employees.filter(employee => employee.id === this.props.employeeId)[0].name,\n      role: this.props.role,\n      startDate: startDate,\n      endDate: endDate,\n      allocation: this.props.allocation,\n      weight: this.props.weight\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.isEditing) {\n      this.fillState();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.isEditing ? this.putAllocation : this.postAllocation,\n      style: {\n        backgroundColor: this.props.isEditing ? '#eeddd3' : '#d3eedd'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 4\n      }\n    }, \"Employee: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      list: \"employees\",\n      name: \"employee\",\n      value: this.state.employee,\n      onChange: this.changeHandler,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"datalist\", {\n      id: \"employees\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, this.props.employees.map(employee => /*#__PURE__*/React.createElement(EmployeeDropdown, Object.assign({}, employee, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 55\n      }\n    })))), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, \" Role: \"), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"role\",\n      value: this.state.role,\n      onChange: this.changeHandler,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, \"BA\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, \"QA\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, \"Dev\")), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \" Start Month: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      min: \"2020-07\",\n      name: \"startDate\",\n      value: this.state.startDate,\n      onChange: this.changeHandler,\n      required: true,\n      style: {\n        width: \"145px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, \" End Month: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      min: \"2020-07\",\n      name: \"endDate\",\n      value: this.state.endDate,\n      onChange: this.changeHandler,\n      style: {\n        width: \"145px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, \" Allocation: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      min: \"0\",\n      max: \"100\",\n      step: \"0.01\",\n      name: \"allocation\",\n      value: this.state.allocation,\n      onChange: this.changeHandler,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, \" Weight: \"), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"weight\",\n      value: this.state.weight,\n      onChange: this.changeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, \".25\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, \".50\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, \".75\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, \"1\")), this.props.isEditing ? /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.toggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 43\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 100\n      }\n    }, \"Confirm\")) : /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 150\n      }\n    }, \"Add Allocation\")));\n  }\n\n}\n\nclass EmployeeDropdown extends React.Component {\n  render() {\n    const employee = this.props;\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, employee.name);\n  }\n\n}\n\nexport default AllocationForm;","map":{"version":3,"sources":["C:/Users/mrocc/cap-man/src/AllocationList.js"],"names":["React","EmployeeList","AllocationForm","Component","constructor","props","changeHandler","event","setState","target","name","value","state","employee","role","startDate","endDate","allocation","weight","postAllocation","bind","putAllocation","fillState","preventDefault","employees","filter","length","emResult","fetch","method","headers","body","JSON","stringify","console","log","e","refreshState","projectId","employeeId","id","allocation1","workWeight","then","result","json","alert","toggleEdit","event1","Date","slice","event2","componentDidMount","isEditing","render","backgroundColor","map","width","EmployeeDropdown"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport EmployeeList from './EmployeeList'\r\n\r\nclass AllocationForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            employee : '',\r\n            role: 'BA',\r\n            startDate : '',\r\n            endDate : '',\r\n            allocation: 100,\r\n            weight : '1'\r\n        }\r\n        this.postAllocation = this.postAllocation.bind(this);\r\n        this.putAllocation = this.putAllocation.bind(this);\r\n        this.fillState = this.fillState.bind(this);\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n    \r\n    async postAllocation(event) {\r\n        event.preventDefault();\r\n        try { \r\n            if (this.props.employees.filter(employee => employee.name === this.state.employee).length === 0) {\r\n                try { \r\n                    const emResult = await fetch('https://localhost:44391/api/employees', {\r\n                        method: 'post',\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-type':'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name : this.state.employee,\r\n                            role : this.state.role\r\n                        })\r\n                    });\r\n        \r\n                    console.log('Result ' + emResult)\r\n                } catch (e) {\r\n                    console.log(e)\r\n                }\r\n                this.props.refreshState();\r\n            }\r\n            fetch('https://localhost:44391/api/allocations', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    projectId: this.props.projectId,\r\n                    employeeId: \r\n                    this.props.employees.filter(employee => employee.name === this.state.employee)[0].id,\r\n                    role: this.state.role,\r\n                    startDate: this.state.startDate,\r\n                    endDate: this.state.endDate,\r\n                    allocation1: this.state.allocation,\r\n                    workWeight: this.state.weight,\r\n                })\r\n            })\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                if (json.length > 0) {\r\n                    alert(json);\r\n                }  \r\n                this.props.refreshState();     \r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.props.refreshState();\r\n    }\r\n\r\n    async putAllocation(event) {\r\n        event.preventDefault();\r\n        try {\r\n            fetch('https://localhost:44391/api/allocations/' + this.props.id, {\r\n                method: 'put',\r\n                headers: {\r\n                    'Content-type':'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id: this.props.id,\r\n                    projectId: this.props.projectId,\r\n                    employeeId: \r\n                    this.props.employees.filter(employee => employee.name === this.state.employee)[0].id,\r\n                    role: this.state.role,\r\n                    startDate: this.state.startDate,\r\n                    endDate: this.state.endDate,\r\n                    allocation1: this.state.allocation,\r\n                    workWeight: this.state.weight,\r\n                })\r\n            })\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                if (json.length > 0) {\r\n                    alert(json);\r\n                }  \r\n                this.props.refreshState();     \r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.props.toggleEdit();\r\n    }\r\n\r\n    fillState() {\r\n        var event1 = new Date(this.props.startDate);\r\n        let startDate = JSON.stringify(event1)\r\n        startDate = startDate.slice(1,8)\r\n        var event2 = new Date(this.props.endDate);\r\n        let endDate = JSON.stringify(event2)\r\n        endDate = endDate.slice(1,8)\r\n        this.setState({\r\n            employee : \r\n            this.props.employees.filter(employee => employee.id === this.props.employeeId)[0].name,\r\n            role: this.props.role,\r\n            startDate : startDate,\r\n            endDate : endDate,\r\n            allocation: this.props.allocation,\r\n            weight : this.props.weight\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isEditing) {\r\n            this.fillState();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\t\t\t<div>\r\n            <form \r\n                onSubmit={this.props.isEditing ? this.putAllocation : this.postAllocation} \r\n                style={{backgroundColor: this.props.isEditing ? '#eeddd3' :'#d3eedd'}}\r\n            >\r\n\t\t\t<label >Employee: </label>\r\n            <input type=\"text\" list=\"employees\"\r\n            name = 'employee'\r\n            value = {this.state.employee}\r\n            onChange = {this.changeHandler}\r\n            required/>\r\n            <datalist id=\"employees\">\r\n                {this.props.employees.map(employee => <EmployeeDropdown {...employee}/>)}\r\n            </datalist>\r\n            <label > Role: </label>\r\n            <select type = \"text\" \r\n            name = 'role'\r\n            value = {this.state.role}\r\n            onChange = {this.changeHandler}\r\n            required>\r\n                <option>BA</option>\r\n                <option>QA</option>\r\n                <option>Dev</option>\r\n            </select>\r\n            <label > Start Month: </label>\r\n            <input type=\"month\" min=\"2020-07\" \r\n            name = 'startDate'\r\n            value = {this.state.startDate}\r\n            onChange = {this.changeHandler}\r\n            required\r\n            style={{width: \"145px\"}}/>\r\n            <label > End Month: </label>\r\n            <input type=\"month\" min=\"2020-07\"\r\n            name = 'endDate'\r\n            value = {this.state.endDate}\r\n            onChange = {this.changeHandler}\r\n            style={{width: \"145px\"}}/>\r\n            <label> Allocation: </label>\r\n            <input \r\n            type=\"number\" min=\"0\" max=\"100\" step=\"0.01\" \r\n            name = 'allocation'\r\n            value = {this.state.allocation}\r\n            onChange = {this.changeHandler}\r\n            required \r\n            />\r\n            <label> Weight: </label>\r\n            <select type = \"text\" \r\n            name = 'weight'\r\n            value = {this.state.weight}\r\n            onChange = {this.changeHandler}>\r\n                <option>.25</option>\r\n                <option>.50</option>\r\n                <option>.75</option>\r\n                <option>1</option>\r\n            </select>        \r\n            {this.props.isEditing ? <span><button onClick = {this.props.toggleEdit}>Cancel</button><button type = 'submit'>Confirm</button></span> : <button type = 'submit'>Add Allocation</button>}\r\n\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nclass EmployeeDropdown extends React.Component {\r\n\trender() {\r\n  \tconst employee = this.props;\r\n  \treturn (\r\n        <option>{employee.name}</option>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllocationForm;"]},"metadata":{},"sourceType":"module"}