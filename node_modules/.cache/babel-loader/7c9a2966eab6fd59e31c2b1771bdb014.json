{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrocc\\\\cap-man\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CapChart from './CapChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\nconst projectData = [[{\n  type: 'string',\n  label: 'Task ID'\n}, {\n  type: 'string',\n  label: 'Task Name'\n}, {\n  type: 'string',\n  label: 'Resource'\n}, {\n  type: 'date',\n  label: 'Start Date'\n}, {\n  type: 'date',\n  label: 'End Date'\n}, {\n  type: 'number',\n  label: 'Duration'\n}, {\n  type: 'number',\n  label: 'Percent Complete'\n}, {\n  type: 'string',\n  label: 'Dependencies'\n}], {\n  'Task ID': 'EEL',\n  'Task Name': 'EEL',\n  'Resource': null,\n  'Start Date': new Date(2020, 5, 1),\n  'End Date': new Date(2020, 7, 14),\n  'Duration': null,\n  'Percent Complete': 100,\n  'Dependencies': null\n}, ['Umbrella', 'Umbrella', null, new Date(2020, 3, 21), new Date(2020, 9, 20), null, 100, null], ['North Carolina', 'North Carolina', null, new Date(2020, 6, 21), new Date(2020, 10, 20), null, 100, null]];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshState = () => {\n      fetch('https://localhost:44391/api/projects').then(res => res.json()).then(json => {\n        this.setState({\n          projects: json\n        });\n      });\n      fetch('https://localhost:44391/api/employees').then(res => res.json()).then(json => {\n        this.setState({\n          employees: json\n        });\n      });\n      fetch('https://localhost:44391/api/allocations').then(res => res.json()).then(json => {\n        this.setState({\n          allocations: json\n        });\n      });\n    };\n\n    this.addProjectData = (id, title, startDate) => {\n      fetch('https://localhost:44391/api/projects/duration/' + id).then(res => res.json()).then(json => {\n        this.setState(prevState => ({\n          data: [...prevState.data, [id, title, null, startDate, json.projectEndDate, null, 100, null]]\n        }));\n      });\n    };\n\n    this.removeProjectData = id => {\n      const newData = [];\n      newData.push(this.state.data[0]);\n      this.setState({\n        data: newData.push(this.state.data.slice(1).filter(project => project[0] !== id))\n      });\n    };\n\n    this.state = {\n      data: [[{\n        type: 'string',\n        label: 'Task ID'\n      }, {\n        type: 'string',\n        label: 'Task Name'\n      }, {\n        type: 'string',\n        label: 'Resource'\n      }, {\n        type: 'date',\n        label: 'Start Date'\n      }, {\n        type: 'date',\n        label: 'End Date'\n      }, {\n        type: 'number',\n        label: 'Duration'\n      }, {\n        type: 'number',\n        label: 'Percent Complete'\n      }, {\n        type: 'string',\n        label: 'Dependencies'\n      }]],\n      projects: [],\n      allocations: [],\n      employees: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshState();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CapChart, {\n      data: projectData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 31\n      }\n    }, \"loading...\") : /*#__PURE__*/React.createElement(ProjectsList, {\n      allocations: this.state.allocations,\n      employees: this.state.employees,\n      projects: this.state.projects,\n      refreshState: this.refreshState,\n      addAllocation: this.addAllocation,\n      addEmployee: this.addEmployee,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 55\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  title: \"Personal Lines Capacity Management\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/mrocc/cap-man/src/index.js"],"names":["React","ReactDOM","CapChart","ProjectsList","serviceWorker","projectData","type","label","Date","App","Component","constructor","props","refreshState","fetch","then","res","json","setState","projects","employees","allocations","addProjectData","id","title","startDate","prevState","data","projectEndDate","removeProjectData","newData","push","state","slice","filter","project","componentDidMount","render","textAlign","loading","addAllocation","addEmployee","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CapChart from './CapChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\n\nconst projectData = [\n    [\n      { type: 'string', label: 'Task ID' },\n      { type: 'string', label: 'Task Name' },\n      { type: 'string', label: 'Resource' },\n      { type: 'date', label: 'Start Date' },\n      { type: 'date', label: 'End Date' },\n      { type: 'number', label: 'Duration' },\n      { type: 'number', label: 'Percent Complete' },\n      { type: 'string', label: 'Dependencies' },\n    ], \n    {\n      'Task ID' :'EEL',\n      'Task Name' : 'EEL',\n      'Resource' : null,\n      'Start Date' : new Date(2020, 5, 1),\n      'End Date' : new Date(2020, 7, 14),\n      'Duration' : null,\n      'Percent Complete' : 100,\n      'Dependencies' : null,\n    },\n    [\n      'Umbrella',\n      'Umbrella',\n      null,\n      new Date(2020, 3, 21),\n      new Date(2020, 9, 20),\n      null,\n      100,\n      null,\n    ],\n    [\n      'North Carolina',\n      'North Carolina',\n      null,\n      new Date(2020, 6, 21),\n      new Date(2020, 10, 20),\n      null,\n      100,\n      null,\n    ],\n  ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [[\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n      ], ], projects: [], allocations: [], employees: []\n    };\n  }\n  refreshState = () => {\n    fetch('https://localhost:44391/api/projects')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              projects: json,\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/employees')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              employees: json\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/allocations')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              allocations: json,\n              });\n        },\n      )\n  }\n  addProjectData = (id, title, startDate) => {\n    fetch('https://localhost:44391/api/projects/duration/' + id)\n    .then(res => res.json())\n    .then(json => {\n        this.setState(prevState => ({\n        data: [...prevState.data, [\n          id,\n          title,\n          null,\n          startDate,\n          json.projectEndDate,\n          null,\n          100,\n          null,\n          ]\n        ],\n        }));\n      },\n    )\n  } \n\n  removeProjectData = (id) => {\n    const newData = [];\n    newData.push(this.state.data[0])\n    this.setState({\n      data: newData.push(this.state.data.slice(1).filter(project => project[0] !== id))\n    });\n  }\n  \n  componentDidMount() {\n    this.refreshState();\n  };\n\n\trender() {\n  \treturn (\n    \t<div>\n        <div><h1 style={{textAlign: \"center\"}}>{this.props.title}</h1></div>\n        <CapChart data={projectData} />\n        {this.state.loading ? <div>loading...</div> : <ProjectsList allocations = {this.state.allocations} employees = {this.state.employees} projects = {this.state.projects} refreshState={this.refreshState} addAllocation={this.addAllocation} addEmployee={this.addEmployee}/>}\n    \t</div>\n    );\n  }\t\n}\n\nReactDOM.render(\n  <App title = 'Personal Lines Capacity Management'/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}