{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrocc\\\\cap-man\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CapChart from './CapChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\nconst projData = [[{\n  type: 'string',\n  label: 'Task ID'\n}, {\n  type: 'string',\n  label: 'Task Name'\n}, {\n  type: 'string',\n  label: 'Resource'\n}, {\n  type: 'date',\n  label: 'Start Date'\n}, {\n  type: 'date',\n  label: 'End Date'\n}, {\n  type: 'number',\n  label: 'Duration'\n}, {\n  type: 'number',\n  label: 'Percent Complete'\n}, {\n  type: 'string',\n  label: 'Dependencies'\n}], ['EEL', 'EEL', null, new Date(2020, 5, 1), new Date(2020, 7, 14), null, 100, null], ['Umbrella', 'Umbrella', null, new Date(2020, 3, 21), new Date(2020, 9, 20), null, 100, null], ['North Carolina', 'North Carolina', null, new Date(2020, 6, 21), new Date(2020, 10, 20), null, 100, null]];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshState = () => {\n      fetch('https://localhost:44391/api/projects').then(res => res.json()).then(json => {\n        this.setState({\n          projects: json\n        });\n      });\n      fetch('https://localhost:44391/api/projects/duration').then(res => res.json()).then(json => {\n        const projectData = [];\n        const projectSettings = this.state.chartData[0];\n        json.map(project => projectData.push([project.taskId, project.taskName, project.resource, project.startDate, project.endDate, project.duration, null, project.dependencies]));\n        projectSettings.push(projectData);\n        this.setState({\n          chartData: projectSettings\n        });\n      });\n      fetch('https://localhost:44391/api/employees').then(res => res.json()).then(json => {\n        this.setState({\n          employees: json\n        });\n      });\n      fetch('https://localhost:44391/api/allocations').then(res => res.json()).then(json => {\n        this.setState({\n          allocations: json\n        });\n      });\n    };\n\n    this.state = {\n      chartData: [[{\n        type: 'string',\n        label: 'Task ID'\n      }, {\n        type: 'string',\n        label: 'Task Name'\n      }, {\n        type: 'string',\n        label: 'Resource'\n      }, {\n        type: 'date',\n        label: 'Start Date'\n      }, {\n        type: 'date',\n        label: 'End Date'\n      }, {\n        type: 'number',\n        label: 'Duration'\n      }, {\n        type: 'number',\n        label: 'Percent Complete'\n      }, {\n        type: 'string',\n        label: 'Dependencies'\n      }]],\n      projects: [],\n      allocations: [],\n      employees: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshState();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CapChart, {\n      data: this.state.chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 31\n      }\n    }, \"loading...\") : /*#__PURE__*/React.createElement(ProjectsList, {\n      allocations: this.state.allocations,\n      employees: this.state.employees,\n      projects: this.state.projects,\n      refreshState: this.refreshState,\n      addAllocation: this.addAllocation,\n      addEmployee: this.addEmployee,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 55\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  title: \"Personal Lines Capacity Management\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/mrocc/cap-man/src/index.js"],"names":["React","ReactDOM","CapChart","ProjectsList","serviceWorker","projData","type","label","Date","App","Component","constructor","props","refreshState","fetch","then","res","json","setState","projects","projectData","projectSettings","state","chartData","map","project","push","taskId","taskName","resource","startDate","endDate","duration","dependencies","employees","allocations","componentDidMount","render","textAlign","title","loading","addAllocation","addEmployee","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CapChart from './CapChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\n\nconst projData = [\n    [\n      { type: 'string', label: 'Task ID' },\n      { type: 'string', label: 'Task Name' },\n      { type: 'string', label: 'Resource' },\n      { type: 'date', label: 'Start Date' },\n      { type: 'date', label: 'End Date' },\n      { type: 'number', label: 'Duration' },\n      { type: 'number', label: 'Percent Complete' },\n      { type: 'string', label: 'Dependencies' },\n    ], \n    [\n      'EEL',\n      'EEL',\n      null,\n      new Date(2020, 5, 1),\n      new Date(2020, 7, 14),\n      null,\n      100,\n      null,\n    ],\n    [\n      'Umbrella',\n      'Umbrella',\n      null,\n      new Date(2020, 3, 21),\n      new Date(2020, 9, 20),\n      null,\n      100,\n      null,\n    ],\n    [\n      'North Carolina',\n      'North Carolina',\n      null,\n      new Date(2020, 6, 21),\n      new Date(2020, 10, 20),\n      null,\n      100,\n      null,\n    ],\n  ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: [\n        [\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n      ],\n      ], projects: [], allocations: [], employees: []\n    };\n  }\n  refreshState = () => {\n    fetch('https://localhost:44391/api/projects')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              projects: json,\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/projects/duration')\n      .then(res => res.json())\n      .then(json => {\n          const projectData = [];\n          const projectSettings = this.state.chartData[0];\n\n          json.map(project =>\n              projectData.push([\n                  project.taskId,\n                  project.taskName,\n                  project.resource,\n                  project.startDate,\n                  project.endDate,\n                  project.duration,\n                  null,\n                  project.dependencies,\n              ])\n           )\n           projectSettings.push(projectData);\n\n          \n          this.setState({\n            chartData: projectSettings\n          });\n        }\n      )\n      fetch('https://localhost:44391/api/employees')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              employees: json\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/allocations')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              allocations: json,\n              });\n        },\n      )\n  }\n  \n  componentDidMount() {\n    this.refreshState();\n  };\n\n\trender() {\n  \treturn (\n    \t<div>\n        <div><h1 style={{textAlign: \"center\"}}>{this.props.title}</h1></div>\n        <CapChart data={this.state.chartData} />\n        {this.state.loading ? <div>loading...</div> : <ProjectsList allocations = {this.state.allocations} employees = {this.state.employees} projects = {this.state.projects} refreshState={this.refreshState} addAllocation={this.addAllocation} addEmployee={this.addEmployee}/>}\n    \t</div>\n    );\n  }\t\n}\n\nReactDOM.render(\n  <App title = 'Personal Lines Capacity Management'/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}