{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrocc\\\\cap-man\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CapChart from './CapChart';\nimport BreakdownChart from './BreakdownChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\nconst chartSettings = [[{\n  type: 'string',\n  label: 'Task ID'\n}, {\n  type: 'string',\n  label: 'Task Name'\n}, {\n  type: 'string',\n  label: 'Resource'\n}, {\n  type: 'date',\n  label: 'Start Date'\n}, {\n  type: 'date',\n  label: 'End Date'\n}, {\n  type: 'number',\n  label: 'Duration'\n}, {\n  type: 'number',\n  label: 'Percent Complete'\n}, {\n  type: 'string',\n  label: 'Dependencies'\n}], ['EEL', 'EEL', null, new Date(2020, 5, 1), new Date(2020, 7, 14), null, 100, null]];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshState = () => {\n      fetch('https://localhost:44391/api/projects').then(res => res.json()).then(json => {\n        this.setState({\n          projects: json\n        });\n      });\n      fetch('https://localhost:44391/api/projects/duration').then(res => res.json()).then(json => {\n        const projectData = [this.state.chartData[0]];\n        json.map(project => projectData.push([project.taskId, project.taskName, project.resource, new Date(project.startDate), new Date(project.endDate), project.duration, null, project.dependencies]));\n        this.setState({\n          chartData: projectData\n        });\n      });\n      fetch('https://localhost:44391/api/employees').then(res => res.json()).then(json => {\n        this.setState({\n          employees: json\n        });\n      });\n      fetch('https://localhost:44391/api/allocations').then(res => res.json()).then(json => {\n        this.setState({\n          allocations: json\n        });\n      });\n      this.state.projects.map(project => /*#__PURE__*/React.createElement(BreakdownChart, Object.assign({\n        chartSettings: [{\n          type: 'string',\n          label: 'Task ID'\n        }, {\n          type: 'string',\n          label: 'Task Name'\n        }, {\n          type: 'string',\n          label: 'Resource'\n        }, {\n          type: 'date',\n          label: 'Start Date'\n        }, {\n          type: 'date',\n          label: 'End Date'\n        }, {\n          type: 'number',\n          label: 'Duration'\n        }, {\n          type: 'number',\n          label: 'Percent Complete'\n        }, {\n          type: 'string',\n          label: 'Dependencies'\n        }]\n      }, project, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 42\n        }\n      })));\n    };\n\n    this.state = {\n      chartData: [[{\n        type: 'string',\n        label: 'Task ID'\n      }, {\n        type: 'string',\n        label: 'Task Name'\n      }, {\n        type: 'string',\n        label: 'Resource'\n      }, {\n        type: 'date',\n        label: 'Start Date'\n      }, {\n        type: 'date',\n        label: 'End Date'\n      }, {\n        type: 'number',\n        label: 'Duration'\n      }, {\n        type: 'number',\n        label: 'Percent Complete'\n      }, {\n        type: 'string',\n        label: 'Dependencies'\n      }]],\n      projects: [],\n      allocations: [],\n      employees: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshState();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 14\n      }\n    }, this.props.title)), /*#__PURE__*/React.createElement(CapChart, {\n      data: this.state.chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 31\n      }\n    }, \"loading...\") : /*#__PURE__*/React.createElement(ProjectsList, {\n      allocations: this.state.allocations,\n      employees: this.state.employees,\n      projects: this.state.projects,\n      refreshState: this.refreshState,\n      addAllocation: this.addAllocation,\n      addEmployee: this.addEmployee,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 55\n      }\n    }), this.state.projects.map(project => /*#__PURE__*/React.createElement(BreakdownChart, Object.assign({\n      chartSettings: [{\n        type: 'string',\n        label: 'Task ID'\n      }, {\n        type: 'string',\n        label: 'Task Name'\n      }, {\n        type: 'string',\n        label: 'Resource'\n      }, {\n        type: 'date',\n        label: 'Start Date'\n      }, {\n        type: 'date',\n        label: 'End Date'\n      }, {\n        type: 'number',\n        label: 'Duration'\n      }, {\n        type: 'number',\n        label: 'Percent Complete'\n      }, {\n        type: 'string',\n        label: 'Dependencies'\n      }]\n    }, project, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 45\n      }\n    }))));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  title: \"Personal Lines Capacity Management\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/mrocc/cap-man/src/index.js"],"names":["React","ReactDOM","CapChart","BreakdownChart","ProjectsList","serviceWorker","chartSettings","type","label","Date","App","Component","constructor","props","refreshState","fetch","then","res","json","setState","projects","projectData","state","chartData","map","project","push","taskId","taskName","resource","startDate","endDate","duration","dependencies","employees","allocations","componentDidMount","render","textAlign","title","loading","addAllocation","addEmployee","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport CapChart from './CapChart';\nimport BreakdownChart from './BreakdownChart';\nimport ProjectsList from './ProjectsList';\nimport * as serviceWorker from './serviceWorker';\n\nconst chartSettings = [\n    [\n      { type: 'string', label: 'Task ID' },\n      { type: 'string', label: 'Task Name' },\n      { type: 'string', label: 'Resource' },\n      { type: 'date', label: 'Start Date' },\n      { type: 'date', label: 'End Date' },\n      { type: 'number', label: 'Duration' },\n      { type: 'number', label: 'Percent Complete' },\n      { type: 'string', label: 'Dependencies' },\n    ], \n    [\n      'EEL',\n      'EEL',\n      null,\n      new Date(2020, 5, 1),\n      new Date(2020, 7, 14),\n      null,\n      100,\n      null,\n    ],\n  ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: [\n        [\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n      ],\n      ], projects: [], allocations: [], employees: []\n    };\n  }\n  refreshState = () => {\n    fetch('https://localhost:44391/api/projects')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              projects: json,\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/projects/duration')\n      .then(res => res.json())\n      .then(json => {\n          const projectData = [this.state.chartData[0],];\n\n          json.map(project =>\n              projectData.push([\n                  project.taskId,\n                  project.taskName,\n                  project.resource,\n                  new Date(project.startDate),\n                  new Date(project.endDate),\n                  project.duration,\n                  null,\n                  project.dependencies,\n              ])\n           )\n\n          \n          this.setState({\n            chartData: projectData\n          });\n        }\n      )\n      fetch('https://localhost:44391/api/employees')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              employees: json\n          });\n        },\n      )\n      fetch('https://localhost:44391/api/allocations')\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n              allocations: json,\n              });\n        },\n      )\n      this.state.projects.map(project => <BreakdownChart chartSettings = {[\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n        ]} {...project}/>)\n  }\n  \n  componentDidMount() {\n    this.refreshState();\n  };\n\n\trender() {\n  \treturn (\n    \t<div>\n        <div><h1 style={{textAlign: \"center\"}}>{this.props.title}</h1></div>\n        <CapChart data={this.state.chartData} />\n        {this.state.loading ? <div>loading...</div> : <ProjectsList allocations = {this.state.allocations} employees = {this.state.employees} projects = {this.state.projects} refreshState={this.refreshState} addAllocation={this.addAllocation} addEmployee={this.addEmployee}/>}\n        {this.state.projects.map(project => <BreakdownChart chartSettings = {[\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'string', label: 'Resource' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n        ]} {...project}/>)}\n      </div>\n    );\n  }\t\n}\n\nReactDOM.render(\n  <App title = 'Personal Lines Capacity Management'/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}